-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.InputObject exposing (..)

import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildMapInput : MapInputRequiredFields -> MapInput
buildMapInput required =
    { name = required.name, mapJson = required.mapJson }


type alias MapInputRequiredFields =
    { name : String
    , mapJson : String
    }


{-| Type for the MapInput input object.
-}
type alias MapInput =
    { name : String
    , mapJson : String
    }


{-| Encode a MapInput into a value that can be used as an argument.
-}
encodeMapInput : MapInput -> Value
encodeMapInput input =
    Encode.maybeObject
        [ ( "name", Encode.string input.name |> Just ), ( "mapJson", Encode.string input.mapJson |> Just ) ]
