input MapInput {
  name: String!
  mapJson: String!
}

input GameInput {
  mapId: String!
  gameJson: String!
}

type Map {
  id: String!
  name: String!
  mapJson: String!
}

type Mutation {
  createGame(newGame: GameInput!): Game!
  createMap(map: MapInput!): Map!
}

type Game {
  id: String!
  map: Map!
  players: [Player!]!
  neutralCountryTroops: [CountryTroopCounts!]!
  numberOfPlayers: Int!
}

type CountryTroopCounts {
  countryId: String!
  troopCount: Int!
}

type PlayerTurn {
  playerId: Int!
  playerTurnStage: PlayerTurnStage!
}

type Player {
  name: String!
  countryTroopCounts: [CountryTroopCounts!]!
  capitol: String
  color: String
  ports: [String]
}

enum PlayerTurnStage {
  CapitolPlacement
  TroopPlacement
  AttackAnnexOrPort
  TroopMovement
  GameOver
}

type Query {
  map(id: String!): Map!
  game(id: String!): Game!
  maps: [Map!]!
}
