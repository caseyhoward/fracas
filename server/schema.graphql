### MAP INPUT ###

input MapInput {
  name: String!
  countries: [CountryInput!]!
  bodiesOfWater: [BodyOfWaterInput!]!
  dimensions: DimensionsInput!
}

input DimensionsInput {
  width: Int!
  height: Int!
}

input CountryInput {
  id: String!
  coordinates: [PointInput!]!
  polygon: [PointInput!]!
  waterEdges: [SegmentInput!]!
  center: PointInput!
  neighboringCountries: [String!]!
  neighboringBodiesOfWater: [String!]!
}

input BodyOfWaterInput {
  id: String!
  neighboringCountries: [String!]!
}

input SegmentInput {
  point1: PointInput!
  point2: PointInput!
}

input PointInput {
  x: Int!
  y: Int!
}

### MAP ###

type Map {
  id: String!
  name: String!
  countries: [Country!]!
  bodiesOfWater: [BodyOfWater!]!
  dimensions: Dimensions!
}

type Country {
  id: String!
  coordinates: [Point!]!
  polygon: [Point!]!
  waterEdges: [Segment!]!
  center: Point!
  neighboringCountries: [String!]!
  neighboringBodiesOfWater: [String!]!
}

type Dimensions {
  width: Int!
  height: Int!
}

type BodyOfWater {
  id: String!
  neighboringCountries: [String!]!
}

type Point {
  x: Int!
  y: Int!
}

type Segment {
  point1: Point!
  point2: Point!
}

### GAME INPUT ###

input NewGameInput {
  mapId: String!
  players: [PlayerInput!]!
  neutralCountryTroops: [CountryTroopCountsInput!]!
  playerTurn: PlayerTurnInput!
}

input GameInput {
  id: String!
  mapId: String!
  players: [PlayerInput!]!
  neutralCountryTroops: [CountryTroopCountsInput!]!
  playerTurn: PlayerTurnInput!
}

input PlayerTurnInput {
  playerId: String!
  playerTurnStage: PlayerTurnStage!
  fromCountryId: String # Only for TroopMovementFromSelected
  troopCount: String # Only for TroopMovementFromSelected
}

input PlayerInput {
  id: String!
  name: String!
  countryTroopCounts: [CountryTroopCountsInput!]!
  capitol: String
  color: ColorInput!
  ports: [String!]!
}

input ColorInput {
  red: Int!
  green: Int!
  blue: Int!
}

input CountryTroopCountsInput {
  countryId: String!
  troopCount: Int!
}

### GAME ###

type Game {
  id: String!
  map: Map!
  players: [Player!]!
  neutralCountryTroops: [CountryTroopCounts!]!
  playerTurn: PlayerTurn!
  currentUserPlayerId: String!
}

type CountryTroopCounts {
  countryId: String!
  troopCount: Int!
}

type PlayerTurn {
  playerId: String!
  playerTurnStage: PlayerTurnStage!
  fromCountryId: String # Only for TroopMovementFromSelected
  troopCount: String # Only for TroopMovementFromSelected
}

type Color {
  red: Int!
  green: Int!
  blue: Int!
}

type Player {
  id: String!
  name: String!
  countryTroopCounts: [CountryTroopCounts!]!
  capitol: String
  color: Color!
  ports: [String!]!
}

enum PlayerTurnStage {
  CapitolPlacement
  TroopPlacement
  AttackAnnexOrPort
  TroopMovement
  TroopMovementFromSelected
  GameOver
}

union InternetGameOrConfiguration = InternetGameConfiguration | Game

type InternetGamePlayerConfiguration {
  color: Color!
  playerId: String!
  name: String!
}

type InternetGameConfiguration {
  id: String!
  players: [InternetGamePlayerConfiguration!]!
  mapId: String!
  joinToken: String!
  currentUserPlayerId: String!
  isCurrentUserHost: Boolean!
}

type Query {
  map(id: String!): Map!
  game(id: String!): Game!
  internetGameOrConfiguration(
    playerToken: String!
  ): InternetGameOrConfiguration!
  internetGame(playerToken: String!): Game!
  maps: [Map!]!
}

type Mutation {
  createGame(newGame: NewGameInput!): Game!
  createInternetGame: String! # Returns hostToken
  createMap(map: MapInput!): Map!
  joinInternetGame(joinGameToken: String!): String! # Returns player token
  removePlayer(playerToken: String!, playerId: String!): Game! # Must be host
  saveGame(game: GameInput!): Game! # Local only
  saveInternetGame(playerToken: String!, game: GameInput!): Boolean!
  startInternetGame(playerToken: String!): Boolean! # Must be host
  updateMapForInternetGame(playerToken: String!, mapId: String!): Boolean!
  updatePlayerNameForInternetGame(name: String!, playerToken: String!): Boolean!
  updatePlayerColorForInternetGame(
    color: ColorInput!
    playerToken: String!
  ): Boolean!
}

type Subscription {
  internetGame(playerToken: String!): Game!
  internetGameOrConfiguration(
    playerToken: String!
  ): InternetGameOrConfiguration!
}
